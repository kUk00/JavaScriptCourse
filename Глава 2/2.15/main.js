//Следующая функция возвращает true, если параметр age больше 18.

//В ином случае она запрашивает подтверждение через confirm и возвращает его результат:
//Будет ли эта функция работать как-то иначе, если убрать else?
function checkAge(age) {
  if (age > 18) {
    return true;
  }
  return confirm('Родители разрешили?');
}


//Следующая функция возвращает true, если параметр age больше 18.

//В ином случае она задаёт вопрос confirm и возвращает его результат.
/*
function checkAge(age) {
  if (age > 18) {
    return true;
  } else {
    return confirm('Родители разрешили?');
  }
}
*/
//Перепишите функцию, чтобы она делала то же самое, но без if, в одну строку.

//Сделайте два варианта функции checkAge:

//Используя оператор ?
//Используя оператор ||
let age = 20;
//1:
function checkAge(age) {
    age > 18 ? true : confirm('Родители разрешили?');
}
//2:
function checkAge(age) {
    return age > 18 || confirm('Родители разрешили?');
}

checkAge(age);
//Напишите функцию min(a,b), которая возвращает меньшее из чисел a и b.

//Пример вызовов:
/*
min(2, 5) == 2
min(3, -1) == -1
min(1, 1) == 1
*/

let a = 2;
let b = 5;

function min(a, b)
{
    return a < b ? a : b;
}

/*Напишите функцию pow(x,n), которая возводит x в степень n и возвращает результат.

pow(3, 2) = 3 * 3 = 9
pow(3, 3) = 3 * 3 * 3 = 27
pow(1, 100) = 1 * 1 * ...* 1 = 1
Создайте страницу, которая запрашивает x и n, а затем выводит результат pow(x,n).

P.S. В этой задаче функция обязана поддерживать только натуральные значения n, т.е. целые от 1 и выше.*/

let x = 3;
let n = 3;

function pow(x, n)
{
    let c = x;
    for(let i = 1; i < n; i++)
    {
        x *= c;
    }

    return x;
}

console.log(pow(x, n));