//Чтобы по максимуму использовать возможности современного JavaScript, все скрипты рекомендуется начинать
// с добавления директивы "use strict".
'use strict';

//Инструкции разделяются точкой с запятой:
alert('Привет'); alert('Мир');

function f() {
    // после объявления функции необязательно ставить точку с запятой
  }
  
  for(;;) {
    // после цикла точка с запятой также необязательна
  }

  //Переменные
//Можно объявить при помощи:

let a   // переменная, локальная или глобальная в зависимости от расположения
const b //(константа, т.е. изменению не подлежит)
var c   //(устаревший способ, всегда глобальна где бы не обьявлялась)

/*
Имя переменной может включать:

Буквы и цифры, однако цифра не может быть первым символом.
Символы $ и _ используются наряду с буквами.
Иероглифы и символы нелатинского алфавита также допустимы, но обычно не используются.
Переменные типизируются динамически. В них могут храниться любые значения:
*/
let x = 5;
x = "Вася";
x = 3.0;

/*
Всего существует 8 типов данных:

number для целых и вещественных чисел,
bigint для работы с целыми числами произвольной длины,
string для строк,
boolean для логических значений истинности или ложности: true/false,
null – тип с единственным значением null, т.е. «пустое значение» или «значение не существует»,
undefined – тип с единственным значением undefined, т.е. «значение не задано»,
object и symbol – сложные структуры данных и уникальные идентификаторы; их мы ещё не изучили.
Оператор typeof возвращает тип значения переменной, с двумя исключениями:
*/
typeof null == "object" // ошибка в языке
typeof function(){} == "function" // именно для функций

alert('Выводит диалоговое окно с текстом');
let msg = prompt('Выводит сообщение с возможностью ввода', 'базовое значение при пустом вводе или отмене');
let boolean = confirm('Выводит текст с двумя кнопками:  ОК и Отмена'); // возвращает true/false

//Операторы

//Операторы присваивания
//Простые a = b и составные a *= 2.

//Битовые операции
//Битовые операторы работают с 32-битными целыми числами на самом низком, побитовом уровне. Подробнее об их использовании можно прочитать 
//на ресурсе MDN и в разделе Побитовые операторы.

//Условный оператор
//Единственный оператор с тремя параметрами: cond ? resultA : resultB. Если условие cond истинно, возвращается resultA,
// иначе – resultB.

//Логические операторы
//Логические И &&, ИЛИ || используют так называемое «ленивое вычисление» и возвращают значение, 
//на котором оно остановилось (не обязательно true или false).
// Логическое НЕ ! конвертирует операнд в логический тип и возвращает инвертированное значение.

//Оператор нулевого слияния
//Оператор ?? предоставляет способ выбора определённого значения из списка переменных. 
//Результатом a ?? b будет a, если только оно не равно null/undefined, тогда b.

//Сравнение
//Проверка на равенство == значений разных типов конвертирует их в число 
//(за исключением null и undefined, которые могут равняться только друг другу)

alert( 0 == false ); // true
alert( 0 == '' ); // true
//Другие операторы сравнения тоже конвертируют значения разных типов в числовой тип.

//Оператор строгого равенства === не выполняет конвертирования: разные типы для него всегда означают разные значения.

//Значения null и undefined особенные: они равны == только друг другу, но не равны ничему ещё.

//Операторы сравнения больше/меньше сравнивают строки посимвольно, остальные типы конвертируются в число.

//Другие операторы
//Существуют и другие операторы, такие как запятая.


//ЦИКЛЫ
// 1
while (condition) {
    //...
  }
  
  // 2
  do {
    //...
  } while (condition);
  
  // 3
  for(let i = 0; i < 10; i++) {
    //...
  }
//Переменная, объявленная в цикле for(let...), видна только внутри цикла. 
//Но мы также можем опустить let и переиспользовать существующую переменную.
//Директивы break/continue позволяют выйти из цикла/текущей итерации. Используйте метки для выхода из вложенных циклов.
//Метка для выхода из вложенного цикла:
point:
for(let i = 0; i < 10; i++) {
    for(let i = 0; i < 10; i++) {
        if(false)
            continue point;
      }
  }

// Конструкция switch

let age = prompt('Сколько вам лет?', 18);

switch (age) {
  case 18:
    alert("Так не сработает"); // результатом prompt является строка, а не число

  case "18":
    alert("А так сработает!");
    break;

  default:
    alert("Любое значение, неравное значению выше");
}

//  Функции

//1.    Function Declaration: функция в основном потоке кода
sum(a,b); // будет работать даже если её вызвали до написания функции
function sum(a, b) {
  let result = a + b;

  return result;
}

//2.    Function Expression: функция как часть выражения
sum2(a,b); // не будет работать, т.к. такая функция ещё не была обьявлена перед выполнением
let sum2 = function(a, b) {
  let result = a + b;

  return result;
};

//3.    Стрелочные функции:

// выражение в правой части
let dif = (a, b) => a - b;

// многострочный код в фигурных скобках { ... }, здесь нужен return:
let pow = (x, n) => {
  let c = x;
  for(let i =1; i < n; i++)
  {
    x *= c;
  }

  return x;
}

// без аргументов
let sayHi = () => alert("Привет");

// с одним аргументом
let double = n => n * 2;
/*
У функций могут быть локальные переменные: т.е. объявленные в теле функции. Такие переменные видимы только внутри функции.
У параметров могут быть значения по умолчанию: function sum(a = 1, b = 2) {...}.
Функции всегда что-нибудь возвращают. Если нет оператора return, результатом будет undefined.
*/

function Hi(a = 'Аноним')
{
    a = prompt('Введите своё имя: ', '');
    console.log(`*${a}* добро пожаловать!`);
}

Hi('Вадим'); // *Вадим* добро пожаловать!
Hi(); // *Аноним* добро пожаловать!